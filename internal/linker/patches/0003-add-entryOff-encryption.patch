From a9c0b26ab88f04509991b10d007f1d885c87fed4 Mon Sep 17 00:00:00 2001
From: pagran <pagran@protonmail.com>
Date: Tue, 10 Jan 2023 23:56:45 +0100
Subject: [PATCH 3/3] add entryOff encryption

---
 cmd/link/internal/ld/pcln.go | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/cmd/link/internal/ld/pcln.go b/cmd/link/internal/ld/pcln.go
index ab13b15042..48e656cf89 100644
--- a/cmd/link/internal/ld/pcln.go
+++ b/cmd/link/internal/ld/pcln.go
@@ -790,6 +790,24 @@ func writeFuncs(ctxt *Link, sb *loader.SymbolBuilder, funcs []loader.Sym, inlSym
 			sb.SetUint32(ctxt.Arch, dataoff, uint32(ldr.SymValue(fdsym)-gofuncBase))
 		}
 	}
+
+	// Moving next code higher is not recommended.
+	// Only at the end of the current function no edits between go versions
+	garbleEntryOffKeyStr := os.Getenv("GARBLE_LINK_ENTRYOFF_KEY")
+	if garbleEntryOffKeyStr == "" {
+		panic("[garble] entryOff key must be set")
+	}
+	var garbleEntryOffKey uint32
+	// Use fmt package instead of strconv to avoid importing a new package
+	if _, err := fmt.Sscan(garbleEntryOffKeyStr, &garbleEntryOffKey); err != nil {
+		panic(fmt.Errorf("[garble] invalid entryOff key %s: %v", garbleEntryOffKeyStr, err))
+	}
+
+	garbleData := sb.Data()
+	for _, off := range startLocations {
+		entryOff := ctxt.Arch.ByteOrder.Uint32(garbleData[off:])
+		sb.SetUint32(ctxt.Arch, int64(off), entryOff^garbleEntryOffKey)
+	}
 }
 
 // pclntab initializes the pclntab symbol with
-- 
2.38.1.windows.1

