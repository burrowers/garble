garble -debugdir=.obf-src build

env TINY_PATTERN='^\/\/line :1$'
env DEFAULT_PATTERN='^\/\/line \w\.go:[1-9][0-9]*$'
env DEFAULT_STACK_PATTERN='^\t\w\.go:[1-9][0-9]*(\s\+0x[0-9a-f]+)?'
env TINY_STACK_PATTERN='^\t\?\?:[0-9][0-9]*(\s\+0x[0-9a-f]+)?$'

# Default mode

# Check for file name leak protection
grep $TINY_PATTERN $WORK/.obf-src/main/main.go
grep $TINY_PATTERN $WORK/.obf-src/main/main1.go

# Check for default line obfuscation
grep $DEFAULT_PATTERN $WORK/.obf-src/main/main.go
grep $DEFAULT_PATTERN $WORK/.obf-src/main/main1.go

exec ./main$exe
cp stderr default.stderr
! grep 'main1?\.go' default.stderr
! grep $TINY_STACK_PATTERN default.stderr
grep $DEFAULT_STACK_PATTERN default.stderr

# Tiny mode

garble -tiny -debugdir=.obf-src build

grep $TINY_PATTERN $WORK/.obf-src/main/main.go
grep $TINY_PATTERN $WORK/.obf-src/main/main1.go

! grep $DEFAULT_PATTERN $WORK/.obf-src/main/main.go
! grep $DEFAULT_PATTERN $WORK/.obf-src/main/main1.go

exec ./main$exe
cp stderr tiny.stderr
! grep 'main1?\.go' tiny.stderr
! grep $DEFAULT_STACK_PATTERN tiny.stderr
grep $TINY_STACK_PATTERN tiny.stderr

-- go.mod --
module main
-- main.go --
package main

import "runtime/debug"

func dump1() {
	debug.PrintStack()
}

func main() {
	dump1()
	dump2()
}
-- main1.go --
package main

import "runtime/debug"

func dump2() {
	debug.PrintStack()
}